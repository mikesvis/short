// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mikesvis/short/internal/storage (interfaces: StorageDeleter)

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/mikesvis/short/internal/domain"
)

// MockStorageDeleter is a mock of StorageDeleter interface.
type MockStorageDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockStorageDeleterMockRecorder
}

// MockStorageDeleterMockRecorder is the mock recorder for MockStorageDeleter.
type MockStorageDeleterMockRecorder struct {
	mock *MockStorageDeleter
}

// NewMockStorageDeleter creates a new mock instance.
func NewMockStorageDeleter(ctrl *gomock.Controller) *MockStorageDeleter {
	mock := &MockStorageDeleter{ctrl: ctrl}
	mock.recorder = &MockStorageDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageDeleter) EXPECT() *MockStorageDeleterMockRecorder {
	return m.recorder
}

// DeleteBatch mocks base method.
func (m *MockStorageDeleter) DeleteBatch(arg0 context.Context, arg1 string, arg2 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteBatch", arg0, arg1, arg2)
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockStorageDeleterMockRecorder) DeleteBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockStorageDeleter)(nil).DeleteBatch), arg0, arg1, arg2)
}

// GetByFull mocks base method.
func (m *MockStorageDeleter) GetByFull(arg0 context.Context, arg1 string) (domain.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFull", arg0, arg1)
	ret0, _ := ret[0].(domain.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFull indicates an expected call of GetByFull.
func (mr *MockStorageDeleterMockRecorder) GetByFull(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFull", reflect.TypeOf((*MockStorageDeleter)(nil).GetByFull), arg0, arg1)
}

// GetByShort mocks base method.
func (m *MockStorageDeleter) GetByShort(arg0 context.Context, arg1 string) (domain.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShort", arg0, arg1)
	ret0, _ := ret[0].(domain.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShort indicates an expected call of GetByShort.
func (mr *MockStorageDeleterMockRecorder) GetByShort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShort", reflect.TypeOf((*MockStorageDeleter)(nil).GetByShort), arg0, arg1)
}

// GetRandkey mocks base method.
func (m *MockStorageDeleter) GetRandkey(arg0 uint) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandkey", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRandkey indicates an expected call of GetRandkey.
func (mr *MockStorageDeleterMockRecorder) GetRandkey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandkey", reflect.TypeOf((*MockStorageDeleter)(nil).GetRandkey), arg0)
}

// GetStats mocks base method.
func (m *MockStorageDeleter) GetStats(arg0 context.Context) (domain.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0)
	ret0, _ := ret[0].(domain.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockStorageDeleterMockRecorder) GetStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockStorageDeleter)(nil).GetStats), arg0)
}

// GetUserURLs mocks base method.
func (m *MockStorageDeleter) GetUserURLs(arg0 context.Context, arg1 string) ([]domain.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", arg0, arg1)
	ret0, _ := ret[0].([]domain.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockStorageDeleterMockRecorder) GetUserURLs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockStorageDeleter)(nil).GetUserURLs), arg0, arg1)
}

// Store mocks base method.
func (m *MockStorageDeleter) Store(arg0 context.Context, arg1 domain.URL) (domain.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(domain.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockStorageDeleterMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockStorageDeleter)(nil).Store), arg0, arg1)
}

// StoreBatch mocks base method.
func (m *MockStorageDeleter) StoreBatch(arg0 context.Context, arg1 map[string]domain.URL) (map[string]domain.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBatch", arg0, arg1)
	ret0, _ := ret[0].(map[string]domain.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreBatch indicates an expected call of StoreBatch.
func (mr *MockStorageDeleterMockRecorder) StoreBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBatch", reflect.TypeOf((*MockStorageDeleter)(nil).StoreBatch), arg0, arg1)
}
