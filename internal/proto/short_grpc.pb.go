// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/short.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortService_SaveURL_FullMethodName         = "/short.ShortService/SaveURL"
	ShortService_ShortenBatchURL_FullMethodName = "/short.ShortService/ShortenBatchURL"
	ShortService_GetURLByID_FullMethodName      = "/short.ShortService/GetURLByID"
	ShortService_GetURLByUser_FullMethodName    = "/short.ShortService/GetURLByUser"
	ShortService_DeleteBatchURL_FullMethodName  = "/short.ShortService/DeleteBatchURL"
	ShortService_GetStats_FullMethodName        = "/short.ShortService/GetStats"
)

// ShortServiceClient is the client API for ShortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис сокращателя ссылок
type ShortServiceClient interface {
	// SaveURL создает короткую ссылку для URL
	SaveURL(ctx context.Context, in *SaveURLRequest, opts ...grpc.CallOption) (*SaveURLResponse, error)
	// ShortenBatchURL создает короткие ссылки пакетно
	ShortenBatchURL(ctx context.Context, in *ShortenBatchURLRequest, opts ...grpc.CallOption) (*ShortenBatchURLResponse, error)
	// GetURLByID получение полной ссылки по сокращенной
	GetURLByID(ctx context.Context, in *GetURLByIDRequest, opts ...grpc.CallOption) (*GetURLByIDResponse, error)
	// GetURLByUser получение сокращенных ссылок пользователя
	GetURLByUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetURLByUserResponse, error)
	// DeleteBatchURL пакетно удаляет сокращенные ссылки
	DeleteBatchURL(ctx context.Context, in *DeleteBatchURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetStats стастистика сокращенных URL и пользователей
	GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type shortServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortServiceClient(cc grpc.ClientConnInterface) ShortServiceClient {
	return &shortServiceClient{cc}
}

func (c *shortServiceClient) SaveURL(ctx context.Context, in *SaveURLRequest, opts ...grpc.CallOption) (*SaveURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveURLResponse)
	err := c.cc.Invoke(ctx, ShortService_SaveURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortServiceClient) ShortenBatchURL(ctx context.Context, in *ShortenBatchURLRequest, opts ...grpc.CallOption) (*ShortenBatchURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenBatchURLResponse)
	err := c.cc.Invoke(ctx, ShortService_ShortenBatchURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortServiceClient) GetURLByID(ctx context.Context, in *GetURLByIDRequest, opts ...grpc.CallOption) (*GetURLByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetURLByIDResponse)
	err := c.cc.Invoke(ctx, ShortService_GetURLByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortServiceClient) GetURLByUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetURLByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetURLByUserResponse)
	err := c.cc.Invoke(ctx, ShortService_GetURLByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortServiceClient) DeleteBatchURL(ctx context.Context, in *DeleteBatchURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ShortService_DeleteBatchURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortServiceClient) GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, ShortService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortServiceServer is the server API for ShortService service.
// All implementations must embed UnimplementedShortServiceServer
// for forward compatibility.
//
// Сервис сокращателя ссылок
type ShortServiceServer interface {
	// SaveURL создает короткую ссылку для URL
	SaveURL(context.Context, *SaveURLRequest) (*SaveURLResponse, error)
	// ShortenBatchURL создает короткие ссылки пакетно
	ShortenBatchURL(context.Context, *ShortenBatchURLRequest) (*ShortenBatchURLResponse, error)
	// GetURLByID получение полной ссылки по сокращенной
	GetURLByID(context.Context, *GetURLByIDRequest) (*GetURLByIDResponse, error)
	// GetURLByUser получение сокращенных ссылок пользователя
	GetURLByUser(context.Context, *emptypb.Empty) (*GetURLByUserResponse, error)
	// DeleteBatchURL пакетно удаляет сокращенные ссылки
	DeleteBatchURL(context.Context, *DeleteBatchURLRequest) (*emptypb.Empty, error)
	// GetStats стастистика сокращенных URL и пользователей
	GetStats(context.Context, *emptypb.Empty) (*GetStatsResponse, error)
	mustEmbedUnimplementedShortServiceServer()
}

// UnimplementedShortServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortServiceServer struct{}

func (UnimplementedShortServiceServer) SaveURL(context.Context, *SaveURLRequest) (*SaveURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveURL not implemented")
}
func (UnimplementedShortServiceServer) ShortenBatchURL(context.Context, *ShortenBatchURLRequest) (*ShortenBatchURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenBatchURL not implemented")
}
func (UnimplementedShortServiceServer) GetURLByID(context.Context, *GetURLByIDRequest) (*GetURLByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLByID not implemented")
}
func (UnimplementedShortServiceServer) GetURLByUser(context.Context, *emptypb.Empty) (*GetURLByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLByUser not implemented")
}
func (UnimplementedShortServiceServer) DeleteBatchURL(context.Context, *DeleteBatchURLRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBatchURL not implemented")
}
func (UnimplementedShortServiceServer) GetStats(context.Context, *emptypb.Empty) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedShortServiceServer) mustEmbedUnimplementedShortServiceServer() {}
func (UnimplementedShortServiceServer) testEmbeddedByValue()                      {}

// UnsafeShortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortServiceServer will
// result in compilation errors.
type UnsafeShortServiceServer interface {
	mustEmbedUnimplementedShortServiceServer()
}

func RegisterShortServiceServer(s grpc.ServiceRegistrar, srv ShortServiceServer) {
	// If the following call pancis, it indicates UnimplementedShortServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortService_ServiceDesc, srv)
}

func _ShortService_SaveURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortServiceServer).SaveURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortService_SaveURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortServiceServer).SaveURL(ctx, req.(*SaveURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortService_ShortenBatchURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenBatchURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortServiceServer).ShortenBatchURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortService_ShortenBatchURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortServiceServer).ShortenBatchURL(ctx, req.(*ShortenBatchURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortService_GetURLByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortServiceServer).GetURLByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortService_GetURLByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortServiceServer).GetURLByID(ctx, req.(*GetURLByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortService_GetURLByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortServiceServer).GetURLByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortService_GetURLByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortServiceServer).GetURLByUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortService_DeleteBatchURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBatchURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortServiceServer).DeleteBatchURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortService_DeleteBatchURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortServiceServer).DeleteBatchURL(ctx, req.(*DeleteBatchURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortServiceServer).GetStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortService_ServiceDesc is the grpc.ServiceDesc for ShortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "short.ShortService",
	HandlerType: (*ShortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveURL",
			Handler:    _ShortService_SaveURL_Handler,
		},
		{
			MethodName: "ShortenBatchURL",
			Handler:    _ShortService_ShortenBatchURL_Handler,
		},
		{
			MethodName: "GetURLByID",
			Handler:    _ShortService_GetURLByID_Handler,
		},
		{
			MethodName: "GetURLByUser",
			Handler:    _ShortService_GetURLByUser_Handler,
		},
		{
			MethodName: "DeleteBatchURL",
			Handler:    _ShortService_DeleteBatchURL_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _ShortService_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/short.proto",
}
